@{
    ViewData["Title"] = "Services";
}

<head>
    <!-- Boxicons -->
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <!-- My CSS -->
    <link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/services.css" asp-append-version="true">
    <style>  
        @@media screen and (max-width: 1200px) {
            .table-data {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .head-title {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .new-request-btn {
                margin-top: 15px;
            }
        }
        
        @@media screen and (max-width: 768px) {
            #sidebar {
                width: 60px;
            }
            
            #sidebar .brand .text,
            #sidebar .side-menu li a .text {
                display: none;
            }
            
            #content {
                width: calc(100% - 60px);
                left: 60px;
            }
            
            .table-container {
                overflow-x: auto;
            }
            
            table {
                min-width: 600px;
            }
            
            .head-title h1 {
                font-size: 24px;
            }
            
            .breadcrumb {
                flex-wrap: wrap;
            }
        }
        
        @@media screen and (max-width: 576px) {
            #content nav .form-input {
                display: none;
            }
            
            #content nav .form-input.show {
                display: block;
                width: 100%;
                position: absolute;
                top: 100%;
                left: 0;
                padding: 10px;
                background: var(--light);
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                z-index: 100;
            }
            
            .head-title {
                padding: 15px;
            }
            
            .table-data {
                padding: 15px;
            }
            
            .todo-list li {
                padding: 15px;
            }
            
            .modal-content {
                width: 95%;
                padding: 15px;
            }
        }
        
        .status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
            text-transform: capitalize;
            display: inline-block;
            text-align: center;
            min-width: 80px;
        }
        
        .status.pending {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .status.in-progress {
            background-color: #cce5ff;
            color: #004085;
        }
        
        .status.completed {
            background-color: #d4edda;
            color: #155724;
        }
        
        .status.rejected {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        @@media screen and (max-width: 768px) {
            .status {
                padding: 4px 8px;
                font-size: 12px;
                min-width: 70px;
            }
            
            .view-btn {
                padding: 4px 8px;
                font-size: 12px;
            }
        }
        
        @@media screen and (max-width: 576px) {
            .status {
                padding: 3px 6px;
                font-size: 11px;
                min-width: 60px;
                border-radius: 15px;
            }
            
            .view-btn {
                padding: 3px 6px;
                font-size: 11px;
            }
            
            td:last-child {
                display: flex;
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }
        }
    </style>
</head>

<title>Services</title>
<body>
    <!-- SIDEBAR -->
    	<!-- SIDEBAR -->
	<section id="sidebar">
		<a href="#" class="brand">
			<i class='bx bxs-smile'></i>
			<span class="text">Welcome</span>
		</a>
		<ul class="side-menu top">
			<li class="active">
				<a asp-area="" asp-controller="Home" asp-action="dashboard">
					<i class='bx bxs-dashboard'></i>
					<span class="text">Dashboard</span>
				</a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="profile">
					<i class='bx bxs-user'></i>
					<span class="text">Profile</span>
				</a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="Announcements">
					<i class='bx bxs-megaphone'></i>
					<span class="text">Announcement</span>
				</a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="billing">
					<i class='bx bxs-credit-card-front'></i>
					<span class="text">Payment and Billing</span>
				</a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="facility_reservation">
					<i class='bx bxs-credit-card-front'></i>
					<span class="text">Facility Reservation</span>
				</a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="Services">
                    <i class='bx bxs-briefcase'></i>
                    <span class="text">Services</span>
                </a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="Community_forum">
                    <i class='bx bxs-message-square-dots'></i>
                    <span class="text">Community Forum</span>
                </a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="security_visitors">
					<i class='bx bxs-shield-alt-2'></i>
					<span class="text">Security and Visitors</span>
				</a>
			</li>
			<li>
				<a asp-area="" asp-controller="Home" asp-action="contact">
					<i class='bx bx-support'></i>
					<span class="text">Contact and Support</span>
				</a>
			</li>
		</ul>
		<ul class="side-menu">
			<li>
				<a href="#">
					<i class='bx bxs-cog'></i>
					<span class="text">Settings</span>
				</a>
			</li>
			<li>
				<a asp-action="logout" class="logout">
					<i class='bx bxs-log-out-circle'></i>
					<span class="text">Logout</span>
				</a>
			</li>
		</ul>
	</section>
    <!-- SIDEBAR -->

    <!-- CONTENT -->
    <section id="content">
        <!-- NAVBAR -->
        <nav>
            <i class='bx bx-menu'></i>
            <form>
                <div class="form-input">
                    <input type="search" placeholder="Search...">
                    <button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
                </div>
            </form>
            <input type="checkbox" id="switch-mode" hidden>
            <label for="switch-mode" class="switch-mode"></label>
            <a href="#" class="notification">
                <i class='bx bxs-bell'></i>
                <span class="num">8</span>
            </a>
            <a asp-area="" asp-controller="Home" asp-action="profile">
                <img src="~/images/profile.jpg" style="border-radius: 50%; width: 36px; height: 36px; object-fit: cover;">
            </a>
        </nav>
        <!-- NAVBAR -->

        <!-- MAIN -->
        <main>
            <div class="head-title">
                <div class="left">
                    <h1>Service Requests</h1>
                    <ul class="breadcrumb">
                        <li>
                            <a asp-area="" asp-controller="Home" asp-action="dashboard">Home</a>
                        </li>
                        <li><i class='bx bx-chevron-right'></i></li>
                        <li>
                            <a class="active" asp-area="" asp-controller="Home" asp-action="Services">Services</a>
                        </li>
                    </ul>
                </div>
                <button class="new-request-btn" onclick="openNewRequestModal()">
                    <i class='bx bx-plus'></i>
                    <span class="text">New Request</span>
                </button>
            </div>

            <div class="table-data">
                <div class="order">
                    <div class="head">
                        <h3>Active Requests</h3>
                        <div class="table-actions">
                            <div class="search-box">
                                <i class='bx bx-search'></i>
                                <input type="text" id="searchInput" placeholder="Search requests...">
                            </div>
                            <div class="filter-box">
                                <i class='bx bx-filter'></i>
                            </div>
                        </div>
                    </div>
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Request ID</th>
                                    <th>Service Type</th>
                                    <th>Status</th>
                                    <th>Date Submitted</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="requestsTableBody">
                                <!-- DYANMIC -->
                            </tbody>
                        </table>
                    </div>
                    <div class="pagination">
                        <button id="prevPage" onclick="changePage(-1)">Previous</button>
                        <span id="pageInfo">Page 1 of 1</span>
                        <button id="nextPage" onclick="changePage(1)">Next</button>
                    </div>
                </div>

                <div class="todo">
                    <div class="head">
                        <h3>Service Categories</h3>
                    </div>
                    <ul class="todo-list">
                        <li class="completed">
                            <p>Maintenance Services</p>
                            <p>Plumbing, Electrical, HVAC</p>
                            <i class='bx bx-wrench'></i>
                        </li>
                        <li class="completed">
                            <p>Security Services</p>
                            <p>Emergency, Patrol, Access Control</p>
                            <i class='bx bx-shield-alt-2'></i>
                        </li>
                        <li class="completed">
                            <p>Landscaping</p>
                            <p>Garden, Lawn, Tree Maintenance</p>
                            <i class='bx bx-leaf'></i>
                        </li>
                        <li class="completed">
                            <p>Facility Booking</p>
                            <p>Clubhouse, Pool, Gym</p>
                            <i class='bx bx-calendar'></i>
                        </li>
                    </ul>
                </div>
            </div>
        </main>
        <!-- MAIN -->

        <!-- COMPLETED SERVICES TABLE -->
        <div class="completed-services">
            <div class="head">
                <h3>Completed Services</h3>
                <div class="table-actions">
                    <div class="search-box">
                        <i class='bx bx-search'></i>
                        <input type="text" id="completedSearchInput" placeholder="Search completed services...">
                    </div>
                </div>
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Request ID</th>
                            <th>Service Type</th>
                            <th>Date Completed</th>
                            <th>Completion Time</th>
                            <th>Staff Notes</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="completedServicesTableBody">
                        <tr>
                            <td>#SR-001</td>
                            <td><span class="service-type maintenance">Maintenance</span></td>
                            <td>2024-03-20</td>
                            <td>2 days</td>
                            <td>Plumbing issue resolved. Replaced faulty pipes.</td>
                            <td>
                                <button class="view-btn" onclick="viewCompletedRequestDetails(SR-001)">
                                    <i class='bx bx-show'></i> View
                                </button>
                            </td>
                        </tr>
                        <tr>
                            <td>#SR-002</td>
                            <td><span class="service-type security">Security</span></td>
                            <td>2024-03-18</td>
                            <td>1 day</td>
                            <td>Security camera system repaired and tested.</td>
                            <td>
                                <button class="view-btn" onclick="viewCompletedRequestDetails(SR-002)">
                                    <i class='bx bx-show'></i> View
                                </button>
                            </td>
                        </tr>
                        <tr>
                            <td>#SR-003</td>
                            <td><span class="service-type landscaping">Landscaping</span></td>
                            <td>2024-03-15</td>
                            <td>3 days</td>
                            <td>Garden maintenance completed. Trees trimmed.</td>
                            <td>
                                <button class="view-btn" onclick="viewCompletedRequestDetails(SR-003)">
                                    <i class='bx bx-show'></i> View
                                </button>
                            </td>
                        </tr>
                        <tr>
                            <td>#SR-004</td>
                            <td><span class="service-type facility">Facility</span></td>
                            <td>2024-03-10</td>
                            <td>5 days</td>
                            <td>Clubhouse cleaning and maintenance completed.</td>
                            <td>
                                <button class="view-btn" onclick="viewCompletedRequestDetails(SR-004)">
                                    <i class='bx bx-show'></i> View
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="pagination">
                <button id="prevCompletedPage" onclick="changeCompletedPage(-1)">Previous</button>
                <span id="completedPageInfo">Page 1 of 1</span>
                <button id="nextCompletedPage" onclick="changeCompletedPage(1)">Next</button>
            </div>
        </div>
        <!-- COMPLETED SERVICES TABLE -->
    </section>

    <!-- REQUEST MODAL -->
    <div id="newRequestModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>New Service Request</h2>
                <span class="close-btn" onclick="closeNewRequestModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="serviceRequestForm">
                    <div class="form-group">
                        <label for="serviceType">Service Type</label>
                        <select id="serviceType" required>
                            <option value="">Select Service Type</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="security">Security</option>
                            <option value="landscaping">Landscaping</option>
                            <option value="facility">Facility Booking</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" required placeholder="Please describe your request in detail..."></textarea>
                    </div>
                    <div class="form-group">
                        <label for="priority">Priority Level</label>
                        <select id="priority" required>
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="urgent">Urgent</option>
                        </select>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="cancel-btn" onclick="closeNewRequestModal()">Cancel</button>
                        <button type="submit" class="submit-btn">Submit Request</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // SIDEBAR TOGGLE
        const menuBar = document.querySelector('#content nav .bx-menu');
        const sidebar = document.getElementById('sidebar');

        menuBar.addEventListener('click', function () {
            sidebar.classList.toggle('hide');
        });

        // SIDEBAR ACTIVE STATE
        const allSideMenu = document.querySelectorAll('#sidebar .side-menu.top li a');

        const currentPath = window.location.pathname;
        allSideMenu.forEach(item => {
            const li = item.parentElement;
            if (item.getAttribute('href') === currentPath || 
                (currentPath.includes(item.getAttribute('href')) && item.getAttribute('href') !== '/')) {
                allSideMenu.forEach(i => {
                    i.parentElement.classList.remove('active');
                })
                li.classList.add('active');
            }
        });

        allSideMenu.forEach(item=> {
            const li = item.parentElement;

            item.addEventListener('click', function () {
                allSideMenu.forEach(i=> {
                    i.parentElement.classList.remove('active');
                })
                li.classList.add('active');
                localStorage.setItem('activeMenu', item.getAttribute('href'));
            })
        });

        const activeMenu = localStorage.getItem('activeMenu');
        if (activeMenu) {
            allSideMenu.forEach(item => {
                if (item.getAttribute('href') === activeMenu) {
                    allSideMenu.forEach(i => {
                        i.parentElement.classList.remove('active');
                    })
                    item.parentElement.classList.add('active');
                }
            });
        }

        // DARK MODE
        const switchMode = document.getElementById('switch-mode');
        switchMode.addEventListener('change', function () {
            if(this.checked) {
                document.body.classList.add('dark');
            } else {
                document.body.classList.remove('dark');
            }
        });

        // SAMPLE DATAA - WILL BE REPLACED WITH ACTUAL DATABASE LATER 
        const sampleRequests = [
            {
                id: 'SR-001',
                serviceType: 'Maintenance',
                status: 'in-progress',
                dateSubmitted: '2024-03-15',
                description: 'Plumbing issue in the bathroom',
                priority: 'High'
            },
            {
                id: 'SR-002',
                serviceType: 'Security',
                status: 'pending',
                dateSubmitted: '2024-03-16',
                description: 'Security camera not working',
                priority: 'Urgent'
            }
        ];

        let currentPage = 1;
        const itemsPerPage = 5;
        let filteredRequests = [...sampleRequests];

        async function initializeTable() {
            try {
                const response = await fetch('/Home/GetServiceRequests');
                const result = await response.json();
                
                if (result.success) {
                    // Filter out completed and rejected requests
                    filteredRequests = result.data.filter(request => 
                        request.status.toLowerCase() !== 'completed' && 
                        request.status.toLowerCase() !== 'rejected'
                    );
                    updateTable();
                    updatePagination();
                } else {
                    showNotification(result.message, 'error');
                }
            } catch (error) {
                showNotification('Error loading service requests: ' + error.message, 'error');
            }
        }

        // Update table with fetched data
        function updateTable() {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const currentPageData = filteredRequests.slice(startIndex, endIndex);

            const tableBody = document.getElementById('requestsTableBody');
            tableBody.innerHTML = '';

            if (currentPageData.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = '<td colspan="5" class="text-center">No active service requests found</td>';
                tableBody.appendChild(emptyRow);
                return;
            }

            currentPageData.forEach(request => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>#${request.id}</td>
                    <td>${request.serviceType}</td>
                    <td><span class="status ${request.status.toLowerCase()}">${request.status}</span></td>
                    <td>${new Date(request.dateSubmitted).toLocaleDateString()}</td>
                    <td>
                        <button class="view-btn" onclick="viewActiveRequestDetails(${request.id})">
                            <i class='bx bx-show'></i> View
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function viewActiveRequestDetails(requestId) {
            const request = filteredRequests.find(r => r.id === requestId);
            if (!request) return;

            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Request Details</h2>
                        <span class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="request-details">
                            <div class="detail-row">
                                <span class="detail-label">Request ID:</span>
                                <span class="detail-value">#${request.id}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Service Type:</span>
                                <span class="detail-value">${request.serviceType}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Status:</span>
                                <span class="detail-value status ${request.status.toLowerCase()}">${request.status}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Priority:</span>
                                <span class="detail-value priority ${request.priority.toLowerCase()}">${request.priority}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Date Submitted:</span>
                                <span class="detail-value">${new Date(request.dateSubmitted).toLocaleDateString()}</span>
                            </div>
                            <div class="detail-row full-width">
                                <span class="detail-label">Description:</span>
                                <div class="detail-value description">${request.description}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            modal.style.display = 'block';

            // Close modal when clicking outside
            modal.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.remove();
                }
            });
        }

        // FILTER SEARCH 
        function filterRequests() {
            const searchText = document.getElementById('searchInput').value.toLowerCase();
            const originalRequests = [...filteredRequests];

            filteredRequests = originalRequests.filter(request => {
                return request.id.toString().toLowerCase().includes(searchText) ||
                       request.serviceType.toLowerCase().includes(searchText) ||
                       request.status.toLowerCase().includes(searchText);
            });

            currentPage = 1;
            updateTable();
            updatePagination();
        }

        // PAGINATION CONTROLS
        function updatePagination() {
            const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);
            document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
        }

        // PAGE 
        function changePage(delta) {
            const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);
            const newPage = currentPage + delta;
            
            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                updateTable();
                updatePagination();
            }
        }

       
        function openNewRequestModal() {
            document.getElementById('newRequestModal').style.display = 'block';
            document.getElementById('serviceRequestForm').reset();
        }

        function closeNewRequestModal() {
            document.getElementById('newRequestModal').style.display = 'none';
        }

        // Handle request status updates
        async function updateRequestStatus(requestId, newStatus) {
            try {
                const response = await fetch('/Home/UpdateRequestStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        requestId: requestId,
                        status: newStatus
                    })
                });

                const result = await response.json();
                if (result.success) {
                    // Remove the request from active requests if completed or rejected
                    if (newStatus.toLowerCase() === 'completed' || newStatus.toLowerCase() === 'rejected') {
                        filteredRequests = filteredRequests.filter(req => req.id !== requestId);
                        updateTable();
                        updatePagination();
                        
                        // Refresh completed requests table
                        await initializeCompletedTable();
                    }
                    showNotification(`Request ${newStatus} successfully!`, 'success');
                } else {
                    showNotification(result.message, 'error');
                }
            } catch (error) {
                showNotification('Error updating request status: ' + error.message, 'error');
            }
        }

        // NOTIFICATION FUNCTION
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification-message ${type}`;
            
            let icon = '';
            switch(type) {
                case 'success':
                    icon = 'bx bx-check-circle';
                    break;
                case 'error':
                    icon = 'bx bx-x-circle';
                    break;
                case 'warning':
                    icon = 'bx bx-error';
                    break;
                default:
                    icon = 'bx bx-info-circle';
            }
            
            notification.innerHTML = `
                <i class='${icon}'></i>
                <span>${message}</span>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.add('hide');
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 3000);
        }

        // SERVICE REQUEST FORM SUBMISSION
        document.getElementById('serviceRequestForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const serviceType = document.getElementById('serviceType').value;
            const description = document.getElementById('description').value;
            const priority = document.getElementById('priority').value;
            
            if (!serviceType) {
                showNotification('Please select a service type', 'error');
                return;
            }
            
            if (!description.trim()) {
                showNotification('Please provide a description', 'error');
                return;
            }
            
            if (!priority) {
                showNotification('Please select a priority level', 'error');
                return;
            }
            
            try {
                // Create service request object
                const serviceRequest = {
                    serviceType: serviceType,
                    description: description,
                    priority: priority
                };

                // Send request to server
                const response = await fetch('/Home/SubmitServiceRequest', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(serviceRequest)
                });

                const data = await response.json();
                if (data.success) {
                    showNotification('Service request submitted successfully!', 'success');
                    closeNewRequestModal();
                    // Refresh the table to show new request
                    await initializeTable();
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('Error submitting request: ' + error.message, 'error');
            }
        });

        // COMPLETED SERVICES TABLE
        let currentCompletedPage = 1;
        const completedItemsPerPage = 5;
        let filteredCompletedServices = [];

        async function initializeCompletedTable() {
            try {
                const response = await fetch('/Home/GetCompletedRequests');
                const result = await response.json();
                
                if (result.success) {
                    filteredCompletedServices = result.data;
                    updateCompletedTable();
                    updateCompletedPagination();
                } else {
                    showNotification(result.message, 'error');
                }
            } catch (error) {
                showNotification('Error loading completed requests: ' + error.message, 'error');
            }
        }

        function updateCompletedTable() {
            const startIndex = (currentCompletedPage - 1) * completedItemsPerPage;
            const endIndex = startIndex + completedItemsPerPage;
            const currentPageData = filteredCompletedServices.slice(startIndex, endIndex);

            const tableBody = document.getElementById('completedServicesTableBody');
            tableBody.innerHTML = '';

            if (currentPageData.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = '<td colspan="5" class="text-center">No completed service requests found</td>';
                tableBody.appendChild(emptyRow);
                return;
            }

            currentPageData.forEach(service => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>#${service.id}</td>
                    <td><span class="service-type ${service.serviceType.toLowerCase()}">${service.serviceType}</span></td>
                    <td>${new Date(service.dateSubmitted).toLocaleDateString()}</td>
                    <td>${calculateCompletionTime(service.dateSubmitted)}</td>
                    <td>${service.staffNotes || 'No notes available'}</td>
                    <td>
                        <button class="view-btn" onclick="viewCompletedRequestDetails(${service.id})">
                            <i class='bx bx-show'></i> View
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function calculateCompletionTime(dateSubmitted) {
            const submittedDate = new Date(dateSubmitted);
            const completedDate = new Date();
            const diffTime = Math.abs(completedDate - submittedDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return `${diffDays} day${diffDays !== 1 ? 's' : ''}`;
        }

        function filterCompletedServices() {
            const searchText = document.getElementById('completedSearchInput').value.toLowerCase();

            const originalServices = [...filteredCompletedServices];
            filteredCompletedServices = originalServices.filter(service => {
                return service.id.toString().toLowerCase().includes(searchText) ||
                       service.serviceType.toLowerCase().includes(searchText) ||
                       (service.staffNotes && service.staffNotes.toLowerCase().includes(searchText));
            });

            currentCompletedPage = 1;
            updateCompletedTable();
            updateCompletedPagination();
        }

        function updateCompletedPagination() {
            const totalPages = Math.ceil(filteredCompletedServices.length / completedItemsPerPage);
            document.getElementById('completedPageInfo').textContent = `Page ${currentCompletedPage} of ${totalPages}`;
            document.getElementById('prevCompletedPage').disabled = currentCompletedPage === 1;
            document.getElementById('nextCompletedPage').disabled = currentCompletedPage === totalPages;
        }

        function changeCompletedPage(delta) {
            const totalPages = Math.ceil(filteredCompletedServices.length / completedItemsPerPage);
            const newPage = currentCompletedPage + delta;
            
            if (newPage >= 1 && newPage <= totalPages) {
                currentCompletedPage = newPage;
                updateCompletedTable();
                updateCompletedPagination();
            }
        }

        function viewCompletedRequestDetails(requestId) {
            const request = filteredCompletedServices.find(r => r.id === requestId);
            if (!request) return;

            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Completed Request Details</h2>
                        <span class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="request-details">
                            <div class="detail-row">
                                <span class="detail-label">Request ID:</span>
                                <span class="detail-value">#${request.id}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Service Type:</span>
                                <span class="detail-value">${request.serviceType}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Priority:</span>
                                <span class="detail-value priority ${request.priority.toLowerCase()}">${request.priority}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Date Submitted:</span>
                                <span class="detail-value">${new Date(request.dateSubmitted).toLocaleDateString()}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Completion Time:</span>
                                <span class="detail-value">${calculateCompletionTime(request.dateSubmitted)}</span>
                            </div>
                            <div class="detail-row full-width">
                                <span class="detail-label">Description:</span>
                                <div class="detail-value description">${request.description}</div>
                            </div>
                            <div class="detail-row full-width">
                                <span class="detail-label">Staff Notes:</span>
                                <div class="detail-value description">${request.staffNotes || 'No notes available'}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            modal.style.display = 'block';

            // Close modal when clicking outside
            modal.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.remove();
                }
            });
        }

        // Initialize event listeners
        document.addEventListener('DOMContentLoaded', function() {
            initializeTable();
            initializeCompletedTable();
            document.getElementById('searchInput').addEventListener('keyup', filterRequests);
            document.getElementById('completedSearchInput').addEventListener('keyup', filterCompletedServices);
        });
    </script>
</body>

