@{
    ViewData["Title"] = "Staff Services";
}

<head>
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/staff_services.css" asp-append-version="true">
    <style>
        @@media screen and (max-width: 1200px) {
            .table-data {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .head-title {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .filter-options {
                margin-top: 15px;
                width: 100%;
                flex-wrap: wrap;
            }
            
            .completed-requests-report {
                margin-top: 20px;
            }
        }
        
        @@media screen and (max-width: 768px) {
            #sidebar {
                width: 60px;
            }
            
            #sidebar .brand .text,
            #sidebar .side-menu li a .text {
                display: none;
            }
            
            #content {
                width: calc(100% - 60px);
                left: 60px;
            }
            
            .table-container {
                overflow-x: auto;
            }
            
            table {
                min-width: 600px;
            }
            
            .head-title h1 {
                font-size: 24px;
            }
            
            .filter-options {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .filter-options select,
            .filter-options .search-box {
                width: 100%;
                margin-bottom: 10px;
            }
            
            .todo-list {
                grid-template-columns: 1fr;
            }
            
            .report-filters {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .report-filters select {
                width: 100%;
                margin-bottom: 10px;
            }
            
            .report-summary {
                flex-direction: column;
            }
            
            .summary-item {
                width: 100%;
                margin-bottom: 10px;
            }
        }
        
        @@media screen and (max-width: 576px) {
            #content nav .form-input {
                display: none;
            }
            
            #content nav .form-input.show {
                display: block;
                width: 100%;
                position: absolute;
                top: 100%;
                left: 0;
                padding: 10px;
                background: var(--light);
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                z-index: 100;
            }
            
            .head-title {
                padding: 15px;
            }
            
            .table-data {
                padding: 15px;
            }
            
            .todo-list li {
                padding: 15px;
            }
            
            .modal-content {
                width: 95%;
                padding: 15px;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .action-btn {
                margin-bottom: 5px;
            }
        }
    </style>
</head>

<title>Staff Services</title>
<body>
    <section id="sidebar">
		<a href="#" class="brand">
			<i class='bx bxs-smile'></i>
			<span class="text">Staff</span>
		</a>
		<ul class="side-menu top">
			<li>
				<a asp-area="" asp-controller="Staff" asp-action="Dashboard">
					<i class='bx bxs-dashboard'></i>
					<span class="text">Dashboard</span>
				</a>
			</li>
			<li>
				<a href="#">
					<i class='bx bxs-user'></i>
					<span class="text">Profile</span>
				</a>
			</li>
			<li>
				<a asp-action="Announcements" asp-controller="Staff">
					<i class='bx bxs-megaphone'></i>
					<span class="text">Announcement</span>
				</a>
			</li>
			<li>
				<a href="#">
					<i class='bx bxs-credit-card-front'></i>
					<span class="text">Payment and Billing</span>
				</a>
			</li>
			<li class="active">
				<a asp-area="" asp-controller="Staff" asp-action="staff_services">
					<i class='bx bxs-briefcase'></i>
					<span class="text">Services</span>
				</a>
			</li>
            <li>
				<a asp-area="" asp-controller="Staff" asp-action="staff_community_forum">
					<i class='bx bxs-message-square-dots'></i>
					<span class="text">Community Forum</span>
				</a>
			</li>
			<li>
				<a asp-area="" asp-controller="Staff" asp-action="staff_security_visitors">
					<i class='bx bxs-shield-alt-2'></i>
					<span class="text">Security and Visitors</span>
				</a>
			</li>
			<li>
                <a asp-area="" asp-controller="Staff" asp-action="staff_contact_and_support">
                    <i class='bx bx-support'></i>
                    <span class="text">Contact and Support</span>
                </a>
            </li>
		</ul>
		<ul class="side-menu">
			<li>
				<a href="#">
					<i class='bx bxs-cog'></i>
					<span class="text">Settings</span>
				</a>
			</li>
			<li>
				<a asp-action="logout" class="logout">
                    <i class='bx bxs-log-out-circle'></i>
                    <span class="text">Logout</span>
                </a>
			</li>
		</ul>
	</section>
    <!-- SIDEBAR -->

    <!-- CONTENT -->
    <section id="content">
        <!-- NAVBAR -->
        <nav>
			<i class='bx bx-menu'></i>
            <input type="hidden" id="antiForgeryToken" value="@ViewBag.AntiForgeryToken" />
			<form action="#">
				<div class="form-input">
					<input type="search" placeholder="Search...">
					<button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
				</div>
			</form>
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
		</nav>
        <!-- NAVBAR -->

        <!-- MAIN -->
        <main>
            <div class="head-title">
                <div class="left">
                    <h1>Service Request Management</h1>
                </div>
                <div class="filter-options">
                    <select id="statusFilter" onchange="filterRequests()">
                        <option value="all">All Status</option>
                        <option value="pending">Pending</option>
                        <option value="accepted">Accepted</option>
                        <option value="rejected">Rejected</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                    </select>
                    <select id="typeFilter" onchange="filterRequests()">
                        <option value="all">All Types</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="security">Security</option>
                        <option value="landscaping">Landscaping</option>
                        <option value="facility">Facility</option>
                    </select>
                    <div class="search-box">
                        <i class='bx bx-search'></i>
                        <input type="text" id="searchInput" placeholder="Search requests..." onkeyup="filterRequests()">
                    </div>
                </div>
            </div>

            <div class="table-data">
                <div class="order">
                    <div class="head">
                        <h3>Service Requests</h3>
                    </div>
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Request ID</th>
                                    <th>Homeowner</th>
                                    <th>Service Type</th>
                                    <th>Priority</th>
                                    <th>Status</th>
                                    <th>Date Submitted</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="requestsTableBody">
                                <!-- DYNAMIC -->
                            </tbody>
                        </table>
                    </div>
                    <div class="pagination">
                        <button id="prevPage" onclick="changePage(-1)">Previous</button>
                        <span id="pageInfo">Page 1 of 1</span>
                        <button id="nextPage" onclick="changePage(1)">Next</button>
                    </div>
                </div>

                <div class="todo">
                    <div class="head">
                        <h3>Quick Stats</h3>
                    </div>
                    <ul class="todo-list">
                        <li class="completed">
                            <p>Total Requests</p>
                            <p>24</p>
                            <i class='bx bx-list-ul'></i>
                        </li>
                        <li class="completed">
                            <p>Pending</p>
                            <p>8</p>
                            <i class='bx bx-time'></i>
                        </li>
                        <li class="completed">
                            <p>In Progress</p>
                            <p>12</p>
                            <i class='bx bx-loader-alt'></i>
                        </li>
                        <li class="completed">
                            <p>Completed</p>
                            <p>4</p>
                            <i class='bx bx-check-circle'></i>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- COMPLETED REQUESTS REPORT -->
            <div class="completed-requests-report">
                <div class="head">
                    <h3>Completed Service Requests Report</h3>
                    <div class="report-filters">
                        <select id="reportMonthFilter" onchange="filterReport()">
                            <option value="all">All Time</option>
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                        <select id="reportYearFilter" onchange="filterReport()">
                            <option value="2024">2024</option>
                            <option value="2023">2023</option>
                        </select>
                    </div>
                </div>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Request ID</th>
                                <th>Homeowner</th>
                                <th>Service Type</th>
                                <th>Priority</th>
                                <th>Date Completed</th>
                                <th>Completion Time</th>
                                <th>Staff Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="completedRequestsTableBody">
                            <!-- Dynamic Content will be loaded here by JavaScript -->
                            <!-- Removing sample static rows -->
                        </tbody>
                    </table>
                </div>
                <div class="pagination">
                    <button id="prevCompletedPage">Previous</button>
                    <span id="completedPageInfo">Page 1 of 1</span>
                    <button id="nextCompletedPage">Next</button>
                </div>
                <div class="report-summary">
                    <div class="summary-item">
                        <span>Total Completed:</span>
                        <strong>4</strong>
                    </div>
                    <div class="summary-item">
                        <span>Average Completion Time:</span>
                        <strong>2.75 days</strong>
                    </div>
                    <div class="summary-item">
                        <span>Most Common Service:</span>
                        <strong>Maintenance</strong>
                    </div>
                </div>
            </div>
        </main>
        <!-- MAIN -->
    </section>

    <!-- REQUEST DETAILS MODAL -->
    <div id="requestDetailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Request Details</h2>
                <span class="close-btn" onclick="closeRequestDetailsModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div id="requestDetailsContent">
                    <!-- Dynamic content -->
                </div>
            </div>
        </div>
    </div>

    <!-- UPDATE STATUS MODAL -->
    <div id="updateStatusModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeUpdateStatusModal()">&times;</span>
            <h2>Update Request Status</h2>
            <form id="updateStatusForm">
                <div class="form-group">
                    <label for="newStatus">New Status</label>
                    <select id="newStatus" required>
                        <option value="pending">Pending</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="staffNotes">Staff Notes</label>
                    <textarea id="staffNotes" placeholder="Add any relevant notes..."></textarea>
                </div>
                <button type="submit" class="submit-btn">Update Status</button>
            </form>
        </div>
    </div>

    <!-- STAFF NOTES MODAL -->
    <div id="staffNotesModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Staff Notes</h2>
                <span class="close-btn" onclick="closeStaffNotesModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="staffNotesForm">
                     <input type="hidden" id="staffNotesForm-requestId"> <!-- Hidden input for actual ID -->
                    <div class="form-group">
                        <label for="staffNotesForm-requestIdDisplay">Request ID:</label> <!-- Display only -->
                        <input type="text" id="staffNotesForm-requestIdDisplay" readonly>
                    </div>
                    <div class="form-group">
                        <label for="staffNotesForm-homeownerName">Homeowner:</label>
                        <input type="text" id="staffNotesForm-homeownerName" readonly>
                    </div>
                    <div class="form-group">
                        <label for="staffNotesForm-serviceType">Service Type:</label>
                        <input type="text" id="staffNotesForm-serviceType" readonly>
                    </div>
                    <div class="form-group">
                        <label for="staffNotesForm-notes">Staff Notes:</label>
                        <textarea id="staffNotesForm-notes" rows="5" placeholder="Enter your notes here..."></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="cancel-btn" onclick="closeStaffNotesModal()">Cancel</button>
                        <button type="submit" class="save-btn">Save Notes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); color: white; display: none; justify-content: center; align-items: center; z-index: 1001;">
        <span>Loading...</span>
    </div>

    <script>
        // SIDEBAR
        const menuBar = document.querySelector('#content nav .bx.bx-menu');
        const sidebar = document.getElementById('sidebar');

        menuBar.addEventListener('click', function () {
            sidebar.classList.toggle('hide');
        });

        // DARK MODE
        const switchMode = document.getElementById('switch-mode');
        const body = document.body;

        if (localStorage.getItem('darkMode') === 'true') {
            body.classList.add('dark');
            switchMode.checked = true;
        }

        switchMode.addEventListener('change', function() {
            if (this.checked) {
                body.classList.add('dark');
                localStorage.setItem('darkMode', 'true');
            } else {
                body.classList.remove('dark');
                localStorage.setItem('darkMode', 'false');
            }
        });

        // ------ DATA AND STATE MANAGEMENT ------
        let allServiceRequests = [];
        let filteredRequests = [];
        let filteredCompletedRequests = [];
        let currentRequestPage = 1;
        const requestsPerPage = 10; // Adjust as needed
        let currentCompletedPage = 1;
        const completedPerPage = 10; // Adjust as needed

        const antiForgeryToken = document.getElementById('antiForgeryToken')?.value;
        let currentSortColumn = 'dateSubmitted'; // Default sort
        let currentSortDirection = 'desc';

        // ------ UTILITY FUNCTIONS ------
        function getStatusText(status) {
            if (!status) return 'Unknown';
            const statusMap = {
                'pending': 'Pending',
                'accepted': 'Accepted',
                'rejected': 'Rejected',
                'in-progress': 'In Progress',
                'completed': 'Completed'
            };
            return statusMap[status.toLowerCase()] || status;
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            try {
                // Assuming dateString is in a format JS can parse (like ISO 8601)
                 const date = new Date(dateString);
                 // Format to YYYY-MM-DD HH:MM (adjust as needed)
                 return date.toLocaleDateString('sv-SE') + ' ' + date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });
            } catch (e) {
                 console.error("Error formatting date:", dateString, e);
                 return 'Invalid Date';
            }
        }

        // ------ NOTIFICATION ------
         function showNotification(message, type = 'info') {
            // Simple notification logic (replace with a more robust library if needed)
            const notificationArea = document.getElementById('notificationArea') || createNotificationArea(); // Ensure area exists
            const notification = document.createElement('div');
            notification.className = `notification ${type}`; // Use CSS classes for styling
            notification.textContent = message;

            notificationArea.appendChild(notification);

            // Auto-remove after a few seconds
            setTimeout(() => {
                notification.style.opacity = '0'; // Fade out
                setTimeout(() => notification.remove(), 500); // Remove after fade
            }, 3000); // Adjust time as needed
        }

        function createNotificationArea() {
            const area = document.createElement('div');
            area.id = 'notificationArea';
            // Style the notification area (position fixed, top right, etc.)
            area.style.position = 'fixed';
            area.style.top = '20px';
            area.style.right = '20px';
            area.style.zIndex = '1002'; // Above loading overlay potentially
            document.body.appendChild(area);
            return area;
        }

        // ------ DATA FETCHING ------
        async function fetchServiceRequests() {
            showLoadingIndicator(true);
            try {
                const response = await fetch('/Staff/GetServiceRequests');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                allServiceRequests = await response.json();
                console.log("Fetched Staff Requests:", allServiceRequests); // Debug
                applyFiltersAndSort(); // Initial filter and sort
            } catch (error) {
                console.error("Error fetching service requests:", error);
                showNotification("Failed to load service requests.", "error");
                allServiceRequests = []; // Clear data on error
                applyFiltersAndSort(); // Update tables even on error
            } finally {
                 showLoadingIndicator(false);
            }
        }

        // ------ FILTERING AND SORTING ------
        function applyFiltersAndSort() {
            const statusFilter = document.getElementById('statusFilter')?.value || 'all';
            const typeFilter = document.getElementById('typeFilter')?.value || 'all';
            const searchText = document.getElementById('searchInput')?.value.toLowerCase() || '';
            const reportMonth = document.getElementById('reportMonthFilter')?.value || 'all';
            const reportYear = document.getElementById('reportYearFilter')?.value || new Date().getFullYear().toString();

            // --- Filter Main Request List ---
            let tempFiltered = allServiceRequests.filter(request => {
                const status = request.status?.toLowerCase() || '';
                const type = request.serviceType?.toLowerCase() || '';

                const matchesStatus = statusFilter === 'all' || status === statusFilter;
                const matchesType = typeFilter === 'all' || type === typeFilter;
                const matchesSearch = (request.requestId?.toLowerCase() || '').includes(searchText) ||
                                    (request.homeownerName?.toLowerCase() || '').includes(searchText) ||
                                    (request.serviceType?.toLowerCase() || '').includes(searchText) ||
                                    (request.description?.toLowerCase() || '').includes(searchText);
                
                // Exclude completed/rejected from the main list *unless* specifically filtered for
                const isFinalState = status === 'completed' || status === 'rejected';
                let showInMain = false;
                if (statusFilter === 'all') {
                    showInMain = !isFinalState; // Only show non-final if filter is 'all'
                } else {
                    showInMain = matchesStatus; // Otherwise, show if filter matches exactly
                }

                return showInMain && matchesType && matchesSearch;
            });

            // --- Sort Main Request List ---
            tempFiltered.sort((a, b) => {
                let valA = a[currentSortColumn];
                let valB = b[currentSortColumn];

                // Handle different data types for sorting
                if (currentSortColumn === 'dateSubmitted' || currentSortColumn === 'dateCompleted') {
                    // Use 0 for null dates to avoid errors, sort nulls last/first as needed
                    valA = a[currentSortColumn] ? new Date(a[currentSortColumn]) : (currentSortDirection === 'desc' ? new Date(0) : new Date(8640000000000000)); 
                    valB = b[currentSortColumn] ? new Date(b[currentSortColumn]) : (currentSortDirection === 'desc' ? new Date(0) : new Date(8640000000000000));
                } else if (currentSortColumn === 'requestId') {
                     // Extract number part for sorting
                     valA = parseInt((a.requestId || 'SR-0').split('-')[1] || 0);
                     valB = parseInt((b.requestId || 'SR-0').split('-')[1] || 0);
                 } else {
                     // Basic string/number comparison
                     valA = typeof valA === 'string' ? valA.toLowerCase() : valA;
                     valB = typeof valB === 'string' ? valB.toLowerCase() : valB;
                 }

                if (valA < valB) return currentSortDirection === 'asc' ? -1 : 1;
                if (valA > valB) return currentSortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            filteredRequests = tempFiltered;
            currentRequestPage = 1; // Reset to first page after filtering/sorting
            updateRequestsTable();
            updateRequestPagination();
            updateQuickStats();

            // --- Filter Completed Requests Report ---
            console.log("Filtering completed/rejected report..."); // Log start
            console.log("Report Filters:", { month: reportMonth, year: reportYear }); // Log filter values

            let tempCompletedFiltered = allServiceRequests.filter(request => {
                const status = request.status?.toLowerCase();
                const isReportableFinalState = status === 'completed' || status === 'rejected'; 

                // Log initial check
                // console.log(`Checking Request ID: ${request.requestId}, Status: ${status}, Is Reportable: ${isReportableFinalState}`);

                if (!isReportableFinalState) return false; 

                const filterDateStr = status === 'completed' ? request.dateCompleted : request.dateSubmitted;
                
                // Log date string being used
                // console.log(`  Using Date String: ${filterDateStr}`);

                if (!filterDateStr) {
                    console.warn(`  Skipping Request ID: ${request.requestId} - No relevant date found.`);
                    return false; // Cannot filter if no relevant date
                }

                try {
                    const filterDate = new Date(filterDateStr);
                    if (isNaN(filterDate.getTime())) { // Check if date parsing failed
                       console.warn(`  Skipping Request ID: ${request.requestId} - Invalid date format: ${filterDateStr}`);
                       return false;
                    }
                    
                    const requestMonth = filterDate.getMonth() + 1;
                    const requestYear = filterDate.getFullYear();
                    
                    const matchesMonth = reportMonth === 'all' || requestMonth === parseInt(reportMonth);
                    const matchesYear = requestYear === parseInt(reportYear);
                    
                    // Log comparison results
                    console.log(`  Request ID: ${request.requestId} (${status}) - Date: ${filterDate.toISOString().split('T')[0]}, Month: ${requestMonth}, Year: ${requestYear}. Filter Match (Month: ${matchesMonth}, Year: ${matchesYear})`);

                    return matchesMonth && matchesYear;
                } catch (e) {
                    console.error(`  Error parsing date for report filter (Request ID: ${request.requestId}):`, filterDateStr, e);
                    return false;
                }
            });

            console.log("Filtered Completed/Rejected Count:", tempCompletedFiltered.length); // Log final count

            // Sort completed/rejected requests (e.g., by completion/submission date descending)
             tempCompletedFiltered.sort((a, b) => {
                 const dateA = new Date(a.dateCompleted || a.dateSubmitted || 0);
                 const dateB = new Date(b.dateCompleted || b.dateSubmitted || 0);
                 return dateB - dateA; // Descending
             });

            filteredCompletedRequests = tempCompletedFiltered;
            currentCompletedPage = 1; // Reset to first page
            updateCompletedRequestsTable();
            updateCompletedPagination();
            updateReportSummary();
        }
        
        function handleSort(column) {
             if (currentSortColumn === column) {
                 currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
             } else {
                 currentSortColumn = column;
                 // Default sort direction based on column type (optional)
                 currentSortDirection = (column === 'dateSubmitted' || column === 'dateCompleted') ? 'desc' : 'asc'; 
             }
             
             // Update header indicators (optional visual feedback)
             updateSortIndicators();
             
             applyFiltersAndSort(); // Re-apply filters and sort
         }
         
         function updateSortIndicators() {
             document.querySelectorAll('.table-container th[data-sort-col]').forEach(th => {
                 th.classList.remove('sort-asc', 'sort-desc');
                 const sortIcon = th.querySelector('.sort-icon');
                 if(sortIcon) sortIcon.innerHTML = ''; // Clear icon

                 if (th.dataset.sortCol === currentSortColumn) {
                     th.classList.add(currentSortDirection === 'asc' ? 'sort-asc' : 'sort-desc');
                     if(sortIcon) sortIcon.innerHTML = currentSortDirection === 'asc' ? '▲' : '▼'; // Add icon
                 }
             });
         }

        // ------ TABLE RENDERING (MAIN REQUESTS) ------
        function updateRequestsTable() {
            const startIndex = (currentRequestPage - 1) * requestsPerPage;
            const endIndex = startIndex + requestsPerPage;
            const currentPageData = filteredRequests.slice(startIndex, endIndex);

            const tableBody = document.getElementById('requestsTableBody');
            if (!tableBody) return;
            tableBody.innerHTML = ''; // Clear existing rows

            if (currentPageData.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="7">No matching service requests found.</td></tr>';
                return;
            }

            currentPageData.forEach(request => {
                const row = document.createElement('tr');
                const statusClass = request.status?.toLowerCase().replace('-', '') || 'unknown'; // e.g., inprogress
                const priorityClass = request.priority?.toLowerCase() || 'unknown';

                // Determine available actions based on status
                let actionButtons = '';
                const currentStatusLower = request.status?.toLowerCase();

                actionButtons += `
                    <button class="action-btn view" onclick="viewRequestDetails(${request.id})" title="View Details">
                        <i class='bx bx-detail'></i>
                    </button>
                `;

                if (currentStatusLower === 'pending') {
                    actionButtons += `
                        <button class="action-btn accept" onclick="promptUpdateStatus(${request.id}, 'Accepted')" title="Accept Request">
                            <i class='bx bx-check-double'></i>
                        </button>
                        <button class="action-btn reject" onclick="promptUpdateStatus(${request.id}, 'Rejected')" title="Reject Request">
                            <i class='bx bx-x-circle'></i>
                        </button>
                    `;
                } else if (currentStatusLower === 'accepted') {
                    actionButtons += `
                        <button class="action-btn progress" onclick="promptUpdateStatus(${request.id}, 'In-Progress')" title="Start Progress">
                            <i class='bx bx-play-circle'></i>
                        </button>
                         <button class="action-btn reject" onclick="promptUpdateStatus(${request.id}, 'Rejected')" title="Reject Request">
                            <i class='bx bx-x-circle'></i>
                        </button>
                         <button class="action-btn complete" onclick="promptUpdateStatus(${request.id}, 'Completed', true)" title="Mark Complete">
                             <i class='bx bx-check-circle'></i>
                         </button>
                    `;
                } else if (currentStatusLower === 'in-progress') {
                     actionButtons += `
                        <button class="action-btn complete" onclick="promptUpdateStatus(${request.id}, 'Completed', true)" title="Mark Complete">
                            <i class='bx bx-check-circle'></i>
                        </button>
                         <button class="action-btn reject" onclick="promptUpdateStatus(${request.id}, 'Rejected')" title="Reject Request">
                            <i class='bx bx-x-circle'></i>
                        </button>
                    `;
                }
                 // Add edit notes button (always available for non-final states, or adjust logic)
                 if (currentStatusLower !== 'completed' && currentStatusLower !== 'rejected') {
                     actionButtons += `
                         <button class="action-btn edit-notes" onclick="openStaffNotesModal(${request.id})" title="Edit/Add Staff Notes">
                             <i class='bx bx-edit'></i>
                         </button>
                     `;
                 }

                row.innerHTML = `
                    <td>${request.requestId || 'N/A'}</td>
                    <td>${request.homeownerName || 'N/A'}</td>
                    <td><span class="service-type ${request.serviceType?.toLowerCase() || 'unknown'}">${request.serviceType || 'N/A'}</span></td>
                    <td><span class="priority ${priorityClass}">${request.priority || 'N/A'}</span></td>
                    <td><span class="status ${statusClass}">${getStatusText(request.status)}</span></td>
                    <td>${formatDate(request.dateSubmitted)}</td>
                    <td>
                        <div class="action-buttons">
                            ${actionButtons}
                        </div>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        // ------ PAGINATION (MAIN REQUESTS) ------
        function updateRequestPagination() {
            const totalPages = Math.ceil(filteredRequests.length / requestsPerPage);
            const pageInfo = document.getElementById('pageInfo');
            const prevBtn = document.getElementById('prevPage');
            const nextBtn = document.getElementById('nextPage');

            if (pageInfo) pageInfo.textContent = `Page ${totalPages > 0 ? currentRequestPage : 0} of ${totalPages}`;
            if (prevBtn) prevBtn.disabled = currentRequestPage === 1 || totalPages === 0;
            if (nextBtn) nextBtn.disabled = currentRequestPage === totalPages || totalPages === 0;
        }

        function changeRequestPage(delta) {
            const totalPages = Math.ceil(filteredRequests.length / requestsPerPage);
            const newPage = currentRequestPage + delta;
            
            if (newPage >= 1 && newPage <= totalPages) {
                currentRequestPage = newPage;
                updateRequestsTable(); // Only re-render the table
                updateRequestPagination(); // Update button states
            }
        }
        
        // ------ QUICK STATS ------
        function updateQuickStats() {
            const stats = {
                total: 0,
                pending: 0,
                accepted: 0,
                inProgress: 0,
                completed: 0,
                rejected: 0
            };

            allServiceRequests.forEach(req => {
                stats.total++;
                const status = req.status?.toLowerCase();
                if (status === 'pending') stats.pending++;
                else if (status === 'accepted') stats.accepted++;
                else if (status === 'in-progress') stats.inProgress++;
                else if (status === 'completed') stats.completed++;
                else if (status === 'rejected') stats.rejected++;
            });

            const statsList = document.querySelector('.todo-list');
            if (statsList) {
                 // Use class names that match your CSS for coloring/styling
                 statsList.innerHTML = `
                     <li class="completed"> <!-- Or use a specific class if needed -->
                         <p>Total Requests</p>
                         <p>${stats.total}</p>
                         <i class='bx bx-list-ul'></i>
                     </li>
                     <li class="${stats.pending > 0 ? 'status-pending' : 'completed'}">
                         <p>Pending</p>
                         <p>${stats.pending}</p>
                         <i class='bx bx-time'></i>
                     </li>
                      <li class="${stats.accepted > 0 ? 'status-accepted' : 'completed'}">
                         <p>Accepted</p>
                         <p>${stats.accepted}</p>
                         <i class='bx bx-check-shield'></i>
                     </li>
                     <li class="${stats.inProgress > 0 ? 'status-in-progress' : 'completed'}">
                         <p>In Progress</p>
                         <p>${stats.inProgress}</p>
                         <i class='bx bx-loader-alt'></i>
                     </li>
                     <li class="completed"> <!-- Assuming completed is always styled as completed -->
                         <p>Completed</p>
                         <p>${stats.completed}</p>
                         <i class='bx bx-check-circle'></i>
                     </li>
                     <li class="${stats.rejected > 0 ? 'status-rejected' : 'completed'}">
                         <p>Rejected</p>
                         <p>${stats.rejected}</p>
                         <i class='bx bx-x-circle'></i>
                     </li>
                 `;
            }
        }

        // ------ COMPLETED/REJECTED REQUESTS REPORT TABLE ------
         function updateCompletedRequestsTable() {
            const startIndex = (currentCompletedPage - 1) * completedPerPage;
            const endIndex = startIndex + completedPerPage;
            const currentPageData = filteredCompletedRequests.slice(startIndex, endIndex);

            const tableBody = document.getElementById('completedRequestsTableBody');
            if (!tableBody) return;
            tableBody.innerHTML = ''; // Clear existing rows

            if (currentPageData.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="8">No completed or rejected requests found for the selected period.</td></tr>';
                return;
            }

            currentPageData.forEach(request => {
                const row = document.createElement('tr');
                const priorityClass = request.priority?.toLowerCase() || 'unknown';
                const statusClass = request.status?.toLowerCase().replace('-', '') || 'unknown';

                row.innerHTML = `
                    <td>${request.requestId || 'N/A'}</td>
                    <td>${request.homeownerName || 'N/A'}</td>
                    <td><span class="service-type ${request.serviceType?.toLowerCase() || 'unknown'}">${request.serviceType || 'N/A'}</span></td>
                    <td><span class="priority ${priorityClass}">${request.priority || 'N/A'}</span></td>
                    <td><span class="status ${statusClass}">${getStatusText(request.status)}</span></td> <!-- Show status -->
                    <td>${formatDate(request.dateCompleted || request.dateSubmitted)}</td> <!-- Show completed or submitted date -->
                    <td>${request.completionTime || 'N/A'}</td>
                    <td>${request.staffNotes || '-'}</td>
                    <td>
                        <!-- Allow editing notes even for completed/rejected -->
                        <button class="action-btn edit-notes" onclick="openStaffNotesModal(${request.id})" title="Edit Staff Notes">
                            <i class='bx bx-edit'></i>
                        </button>
                         <button class="action-btn view" onclick="viewRequestDetails(${request.id})" title="View Details">
                            <i class='bx bx-detail'></i>
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }
        
        function updateCompletedPagination() {
            const totalPages = Math.ceil(filteredCompletedRequests.length / completedPerPage);
            // Ensure unique IDs for report pagination controls if they exist
            const pageInfo = document.getElementById('completedPageInfo'); // Make sure this ID exists in your HTML
            const prevBtn = document.getElementById('prevCompletedPage'); // Make sure this ID exists
            const nextBtn = document.getElementById('nextCompletedPage'); // Make sure this ID exists

            if (pageInfo) pageInfo.textContent = `Page ${totalPages > 0 ? currentCompletedPage : 0} of ${totalPages}`;
            if (prevBtn) prevBtn.disabled = currentCompletedPage === 1 || totalPages === 0;
            if (nextBtn) nextBtn.disabled = currentCompletedPage === totalPages || totalPages === 0;
        }

        function changeCompletedPage(delta) {
            const totalPages = Math.ceil(filteredCompletedRequests.length / completedPerPage);
            const newPage = currentCompletedPage + delta;

            if (newPage >= 1 && newPage <= totalPages) {
                currentCompletedPage = newPage;
                updateCompletedRequestsTable();
                updateCompletedPagination();
            }
        }

        function updateReportSummary() {
            const reportData = filteredCompletedRequests.filter(r => r.status?.toLowerCase() === 'completed'); // Only summarize 'completed'
            const totalCompleted = reportData.length;
            let totalCompletionSeconds = 0;
            const serviceCounts = {};

            reportData.forEach(req => {
                if (req.dateCompleted && req.dateAccepted) { // Use accepted date as start for calculation
                     try {
                         const start = new Date(req.dateAccepted);
                         const end = new Date(req.dateCompleted);
                         totalCompletionSeconds += (end - start) / 1000; // Duration in seconds
                     } catch (e) { /* Handle date parse error */ }
                 }
                 serviceCounts[req.serviceType] = (serviceCounts[req.serviceType] || 0) + 1;
            });

            const avgCompletionSeconds = totalCompleted > 0 ? totalCompletionSeconds / totalCompleted : 0;
            let avgCompletionTimeStr = 'N/A';
            if (avgCompletionSeconds > 0) {
                 const avgDays = avgCompletionSeconds / (24 * 60 * 60);
                 const avgHours = (avgCompletionSeconds % (24 * 60 * 60)) / (60 * 60);
                 const avgMinutes = (avgCompletionSeconds % (60 * 60)) / 60;
                 if (avgDays >= 1) {
                      avgCompletionTimeStr = `${avgDays.toFixed(1)} days`;
                 } else if (avgHours >= 1) {
                      avgCompletionTimeStr = `${avgHours.toFixed(1)} hours`;
                 } else {
                     avgCompletionTimeStr = `${avgMinutes.toFixed(0)} minutes`;
                 }
             }

            const mostCommonService = Object.entries(serviceCounts).sort(([,a],[,b]) => b-a)[0]?.[0] || 'N/A';

            const summaryContainer = document.querySelector('.report-summary');
            if (summaryContainer) {
                 summaryContainer.innerHTML = `
                     <div class="summary-item">
                         <span>Total Completed:</span>
                         <strong>${totalCompleted}</strong>
                     </div>
                     <div class="summary-item">
                         <span>Avg. Completion Time:</span>
                         <strong>${avgCompletionTimeStr}</strong>
                     </div>
                     <div class="summary-item">
                         <span>Most Common Service:</span>
                         <strong>${mostCommonService}</strong>
                     </div>
                 `;
            }
        }

        // ------ MODALS AND ACTIONS ------

        // Generic function to handle status updates
        async function updateStatusOnServer(requestId, newStatus, staffNotes = null) {
             showLoadingIndicator(true);
             try {
                 const response = await fetch('/Staff/UpdateServiceRequestStatus', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'RequestVerificationToken': antiForgeryToken
                     },
                     body: JSON.stringify({ requestId, newStatus, staffNotes })
                 });

                 const result = await response.json();

                 if (response.ok && result.success) {
                     showNotification(result.message || `Request status updated to ${newStatus}.`, 'success');
                     await fetchServiceRequests(); // Refetch data to update UI correctly
                 } else {
                     throw new Error(result.message || 'Failed to update status.');
                 }
             } catch (error) {
                 console.error("Error updating status:", error);
                 showNotification(error.message || "An error occurred while updating the status.", "error");
             } finally {
                  showLoadingIndicator(false);
             }
        }

        // Prompt before updating status
        function promptUpdateStatus(requestId, newStatus, requireNotesForComplete = false) {
            const request = allServiceRequests.find(r => r.id === requestId);
            if (!request) return;

            let message = `Are you sure you want to change the status to "${newStatus}"?`;
            let requiresNotes = newStatus === 'Rejected' || (newStatus === 'Completed' && requireNotesForComplete);
            let notes = null;

            if (requiresNotes) {
                 message += `\nPlease provide notes${newStatus === 'Rejected' ? ' (required)' : ' (optional)'}:`;
                 notes = prompt(message, request.staffNotes || '');
                 if (notes === null) return; // User cancelled prompt
                 if (notes.trim() === '' && newStatus === 'Rejected') {
                     showNotification('Notes are required when rejecting a request.', 'warning');
                     return;
                 }
                 // Allow empty notes for 'Completed' if requireNotesForComplete is false or notes are optional
            } else {
                 if (!confirm(message)) {
                     return; // User cancelled confirmation
                 }
             }
             
             // Proceed with the update
             updateStatusOnServer(requestId, newStatus, notes);
        }

        // View Request Details Modal (Staff side)
        function viewRequestDetails(requestId) {
            // Use parseInt because the ID from the button click might be a string
            const request = allServiceRequests.find(r => r.id === parseInt(requestId));
            if (!request) {
                 showNotification('Request details not found.', 'error');
                 return;
            }

            const modal = document.getElementById('requestDetailsModal');
            const content = document.getElementById('requestDetailsContent');
            if (!modal || !content) return;

            content.innerHTML = `
                 <p><strong>Request ID:</strong> ${request.requestId || 'N/A'}</p>
                 <p><strong>Homeowner:</strong> ${request.homeownerName || 'N/A'}</p>
                 <p><strong>Service Type:</strong> ${request.serviceType || 'N/A'}</p>
                 <p><strong>Priority:</strong> <span class="priority ${request.priority?.toLowerCase() || 'unknown'}">${request.priority || 'N/A'}</span></p>
                 <p><strong>Status:</strong> <span class="status ${request.status?.toLowerCase().replace('-', '') || 'unknown'}">${getStatusText(request.status)}</span></p>
                 <p><strong>Date Submitted:</strong> ${formatDate(request.dateSubmitted)}</p>
                 <p><strong>Description:</strong></p>
                 <p style="white-space: pre-wrap; max-height: 150px; overflow-y: auto;">${request.description || '-'}</p>
                 <hr>
                 <p><strong>Staff Notes:</strong></p>
                 <p style="white-space: pre-wrap; max-height: 150px; overflow-y: auto;">${request.staffNotes || '-'}</p>
                  <hr>
                  ${request.dateAccepted ? `<p><strong>Date Accepted:</strong> ${formatDate(request.dateAccepted)}</p>` : ''}
                  ${request.dateStarted ? `<p><strong>Date Started:</strong> ${formatDate(request.dateStarted)}</p>` : ''}
                  ${request.dateCompleted ? `<p><strong>Date Completed:</strong> ${formatDate(request.dateCompleted)}</p>` : ''}
                  ${request.completionTime ? `<p><strong>Completion Time:</strong> ${request.completionTime}</p>` : ''}
             `;

            modal.style.display = 'block';
        }

        function closeRequestDetailsModal() {
            const modal = document.getElementById('requestDetailsModal');
            if (modal) modal.style.display = 'none';
        }

        // Staff Notes Modal
        function openStaffNotesModal(requestId) {
            const modal = document.getElementById('staffNotesModal');
             // Use parseInt here as well
            const request = allServiceRequests.find(r => r.id === parseInt(requestId));
            
            if (request && modal) {
                // Use request.id (the actual database ID) for the hidden input
                document.getElementById('staffNotesForm-requestId').value = request.id;
                // Display formatted ID for the user
                document.getElementById('staffNotesForm-requestIdDisplay').value = request.requestId || 'N/A'; 
                document.getElementById('staffNotesForm-homeownerName').value = request.homeownerName || 'N/A';
                document.getElementById('staffNotesForm-serviceType').value = request.serviceType || 'N/A';
                document.getElementById('staffNotesForm-notes').value = request.staffNotes || '';
                
                modal.style.display = 'block';
            } else {
                showNotification('Could not load request details for notes.', 'error');
            }
        }

        function closeStaffNotesModal() {
            const modal = document.getElementById('staffNotesModal');
            if (modal) modal.style.display = 'none';
        }

        // Staff Notes Form Submission
        document.getElementById('staffNotesForm')?.addEventListener('submit', async function(e) {
            e.preventDefault();
            showLoadingIndicator(true);

            // Get the actual ID from the hidden input
            const requestId = parseInt(document.getElementById('staffNotesForm-requestId')?.value);
            const staffNotes = document.getElementById('staffNotesForm-notes')?.value;

            if (isNaN(requestId)) {
                 showNotification('Invalid Request ID.', 'error');
                 showLoadingIndicator(false);
                 return;
            }

            try {
                 const response = await fetch('/Staff/UpdateStaffNotes', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'RequestVerificationToken': antiForgeryToken
                     },
                     body: JSON.stringify({ requestId, staffNotes })
                 });

                 const result = await response.json();

                 if (response.ok && result.success) {
                     showNotification(result.message || 'Staff notes updated successfully!', 'success');
                     closeStaffNotesModal();
                     // Find the request in the local array and update notes for immediate UI feedback
                     const updatedRequest = allServiceRequests.find(r => r.id === requestId);
                     if (updatedRequest) {
                         updatedRequest.staffNotes = staffNotes;
                         // Re-apply filters and sort to update both tables if necessary
                         applyFiltersAndSort(); 
                     }
                 } else {
                     throw new Error(result.message || 'Failed to update notes.');
                 }
             } catch (error) {
                 console.error("Error updating staff notes:", error);
                 showNotification(error.message || "An error occurred while updating notes.", "error");
             } finally {
                  showLoadingIndicator(false);
             }
        });
        
        // ------ LOADING INDICATOR ------
        function showLoadingIndicator(show) {
             const overlay = document.getElementById('loadingOverlay'); 
             if (overlay) {
                 overlay.style.display = show ? 'flex' : 'none';
             }
        }

        // ------ INITIALIZATION AND EVENT LISTENERS ------
        window.onclick = function(event) {
            const detailsModal = document.getElementById('requestDetailsModal');
            const notesModal = document.getElementById('staffNotesModal');
            // Close modals if clicked outside their content area
            if (event.target === detailsModal) {
                closeRequestDetailsModal();
            }
            if (event.target === notesModal) {
                closeStaffNotesModal();
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchServiceRequests(); // Initial load

            // Filter listeners
            document.getElementById('statusFilter')?.addEventListener('change', applyFiltersAndSort);
            document.getElementById('typeFilter')?.addEventListener('change', applyFiltersAndSort);
            document.getElementById('searchInput')?.addEventListener('keyup', applyFiltersAndSort);
            document.getElementById('reportMonthFilter')?.addEventListener('change', applyFiltersAndSort);
            document.getElementById('reportYearFilter')?.addEventListener('change', applyFiltersAndSort);

            // Pagination Listeners (Main Table)
            document.getElementById('prevPage')?.addEventListener('click', () => changeRequestPage(-1));
            document.getElementById('nextPage')?.addEventListener('click', () => changeRequestPage(1));
            
            // Pagination Listeners (Completed/Report Table - ensure unique IDs)
            document.getElementById('prevCompletedPage')?.addEventListener('click', () => changeCompletedPage(-1));
            document.getElementById('nextCompletedPage')?.addEventListener('click', () => changeCompletedPage(1));
            
             // Add sorting listeners to main table headers
             document.querySelectorAll('.table-data .order table thead th[data-sort-col]').forEach(th => {
                 th.style.cursor = 'pointer'; // Indicate clickable
                 // Add a span for the sort icon if it doesn't exist
                 if (!th.querySelector('.sort-icon')) {
                    const iconSpan = document.createElement('span');
                    iconSpan.className = 'sort-icon';
                    iconSpan.style.marginLeft = '5px';
                    th.appendChild(iconSpan);
                 }
                 th.addEventListener('click', () => handleSort(th.dataset.sortCol));
             });
             
            // Initial sort indicator update
            updateSortIndicators();
             
            // Add sorting listeners to completed table headers (optional, if needed)
             // ... similar logic for completed table headers ...
        });

    </script>
</body>
